module SystemX (output F, input A,B,C)
always @ (A,B,C)
begin
	case ({ABC})
		3'b000: F = 1'b1;
		3'b010: F = 1'b1;
		3'b110: F = 1'b1;
		default: F = 1'b0;
	endcase
end
endmodule

inital
begin
	Clk = 0;
	forever
		#10 Clk = ~Clk;
end
module check_lpm ( clk, reset, q);
// Port Declaration

input   clk;
input   reset;
output  [7:0] q;

lpm_counter u1 (.aclr(reset), .clock(clk), .q(q));
defparam u1.lpm_width= 8;
defparam u1.lpm_direction= "UP"

endmodule

$display("hellow world");
$display("A = %b",A)	


`timescale 1ns/1ps
module SystemX_TB ()
reg A_TB,B_TB,C_TB;
wire F_TB;

SystemX dut(.F(F_TB), .A(A_TB), .B(B_TB), .C(C_TB));

inital
begin
	A_TB = 0; B_TB = 0; C_TB = 0;
#10     A_TB = 0; B_TB = 0; C_TB = 1;
#10     A_TB = 0; B_TB = 1; C_TB = 0;
#10     A_TB = 0; B_TB = 1; C_TB = 1;
#10     A_TB = 1; B_TB = 0; C_TB = 0;
#10     A_TB = 1; B_TB = 0; C_TB = 1;
#10     A_TB = 1; B_TB = 1; C_TB = 0;
#10     A_TB = 1; B_TB = 1; C_TB = 1;
end

endmodule

module Dfilpflop (output reg Q,Qn, input wire D,CLK,Reset, Preset, EN)
always @ (posedge CLK or negedge Reset or negedge Preset, EN)
	if(!Reset)
	begin
		Q <= 1'b0;
		Qn <= 1'b1;
	end
	else if(!Preset)
	begin
		Q <= 1'b1;
		Qn <= 1'b0;
	end
	else if (EN)
	begin
		Q <= D;
		Qn <= ~D;
	end
endmodule

module Window (output reg CW, CCW, input wire Press, Clock, Reset)
	reg current_state, next_state;
	parameter w_closed = 1'b0, w_open = 1'b1;
	
	always @ (negedge Reset or posedge Clock)
		begin: state memory
			if (! Reset)
				current_state <= w_closed;
			else
				current_state <= next_state;
		end
	
	always @ (Press or current_state)
		begin: next state logic
			case (current_state)
			w_closed: if (Press == 1'b1)
					next_state = w_open;
				  else
				  	next_state = w_closed;
			w_open:   if (Press == 1'b1)
					next_state = w_closed;
				  else
				  	next_state = w_open;
			default: next_state = w_closed;
			endcase
		end
		
	always @ (current_state or Press)
		begin: output logic
			case (current_state)
				w_closed: if (Press == 1'b1)
						begin
							Open_CW = 1'b1;
							Close_CCW = 1'b0;
						end
					  else
					  	begin
					  		Open_CW = 1'b0;
					  		Close_CCW = 1'b0;
					  	end
				w_open:   if (Press == 1'b1)
						begin
							Open_CW = 1'b0;
							Close_CCW = 1'b1;
						end
					  else
					  	begin
					  		Open_CW = 1'b0;
					  		Close_CCW = 1'b0;
					  	end
			endcase
		end
		
endmodule
					
			
endmodule

module Serial_bit_detect (output reg Err, input wire Reset, Din, Clock)

	reg[2:0] state;
	reg[2:0] next_state;

	always @ (posedge Clock or Reset)
		begin: state memory
		if (!Reset)
			state <= 3'b000;
		else
			state <= next_state;
		end
		
	always @ (posedge Clock or Reset)
		begin: next state logic
		if (!Reset)
			next_state = 3'b000;
		else
			next_state = {state[1:0], Din};
		end
		
	always @ (posedge Clock)
		begin: oupt logic
		if (state == 3'b111)
			Err = 1'b1;
		else
			Err = 1'b0;
		end
		
endmodule


